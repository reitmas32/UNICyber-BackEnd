basePath: /
definitions:
  models.Response:
    properties:
      Data: {}
      Message:
        example: Equipo 2
        type: string
      Success:
        example: false
        type: boolean
    type: object
  schemas.ComputerCreateSchema:
    description: Descripci√≥n de la estructura A
    properties:
      id_room:
        example: 3
        type: integer
      id_state:
        example: 3
        type: integer
      name:
        example: Equipo 2
        type: string
      type:
        example: Impresora
        type: string
    required:
    - id_room
    - id_state
    - name
    - type
    type: object
  schemas.ComputerLabCreateSchema:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - description
    - name
    type: object
  schemas.ComputerLabUpdateSchema:
    properties:
      description:
        type: string
      name:
        description: Data
        type: string
    required:
    - description
    - name
    type: object
  schemas.ComputerUpdateSchema:
    properties:
      message:
        example: Solo falta instalar DevC++
        type: string
      name:
        description: Data
        example: Equipo 3
        type: string
      pos_x:
        description: UI
        example: 156.29
        type: number
      pos_y:
        example: 157.3
        type: number
      state:
        example: Disponible
        type: string
      type:
        example: Prestamo
        type: string
    type: object
  schemas.LinkAccountConfirmationSchema:
    properties:
      code:
        type: string
      user_name:
        type: string
    required:
    - code
    - user_name
    type: object
  schemas.LinkAccountRequisitionSchema:
    properties:
      idComputerLab:
        type: integer
      user_name:
        type: string
    required:
    - idComputerLab
    - user_name
    type: object
  schemas.LoanCreateByAccountNumberSchema:
    properties:
      account_number:
        type: string
      id_computer:
        type: integer
    required:
    - account_number
    - id_computer
    type: object
  schemas.LoanCreateSchema:
    properties:
      id_computer:
        type: integer
      id_student:
        type: integer
    required:
    - id_computer
    - id_student
    type: object
  schemas.LoanLeaveComputerSchema:
    properties:
      id_computer:
        type: integer
    required:
    - id_computer
    type: object
  schemas.RoomCreateSchema:
    properties:
      id_computer_lab:
        type: integer
      name:
        type: string
    required:
    - id_computer_lab
    - name
    type: object
  schemas.RoomUpdateSchema:
    properties:
      index:
        type: integer
      name:
        description: Data
        type: string
    type: object
  schemas.SetStateSchema:
    properties:
      id_state:
        example: 1
        type: integer
    type: object
  schemas.StudentCreateSchema:
    properties:
      account_number:
        type: string
      email:
        type: string
      id_university_program:
        description: Info Academic
        type: integer
      last_name:
        type: string
      name:
        description: Info Personal
        type: string
      semester:
        type: integer
    required:
    - account_number
    - id_university_program
    - last_name
    - name
    - semester
    type: object
  schemas.StudentUpdateSchema:
    properties:
      account_number:
        type: string
      email:
        type: string
      id_university_program:
        description: Info Academic
        type: integer
      last_name:
        type: string
      name:
        description: Info Personal
        type: string
      semester:
        type: integer
      university_program:
        type: string
    type: object
  schemas.UserSignInSchema:
    properties:
      password:
        type: string
      user_name:
        type: string
    required:
    - password
    - user_name
    type: object
  schemas.UserSignUpSchema:
    properties:
      date_of_birth:
        type: string
      email:
        type: string
      last_name:
        type: string
      name:
        type: string
      password:
        type: string
      phone_number:
        type: string
      role:
        type: string
      user_name:
        type: string
    required:
    - date_of_birth
    - email
    - last_name
    - name
    - password
    - phone_number
    - role
    - user_name
    type: object
host: localhost:3000
info:
  contact:
    email: rafa.zamora.rals@gmail.com
    name: Oswaldo Rafael Zamora Ramirez
    url: https://github.com/reitmas32
  description: This is a API by System UNICyber|SISEC https://github.com/reitmas32/UNICyber-BackEnd
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: UNICyber-API
  version: "1.0"
paths:
  /api/v1/computer:
    delete:
      operationId: delete-computer
      parameters:
      - description: ID of Computer
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: delete a item of the computers
      tags:
      - Computers
    get:
      operationId: get-computer
      parameters:
      - description: ID of Computer
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: get a item of the computers
      tags:
      - Computers
    post:
      operationId: create-computer
      parameters:
      - description: Schema by Create New Computer
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.ComputerCreateSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: add a new item of the computers
      tags:
      - Computers
    put:
      operationId: put-computer
      parameters:
      - description: ID of Computer
        in: path
        name: id
        required: true
        type: string
      - description: Schema by Update New Computer
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.ComputerUpdateSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: update a item of the computers
      tags:
      - Computers
  /api/v1/computer-lab:
    delete:
      operationId: delete-computer-lab
      parameters:
      - description: ID del item
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: delete a item of the computer-lab
      tags:
      - Computer Lab
    get:
      operationId: get-computer-lab
      parameters:
      - description: ID of ComputerLab
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: get a item of the computer-lab
      tags:
      - Computer Lab
    post:
      operationId: create-computer-lab
      parameters:
      - description: Schema by Create New Computer Lab
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.ComputerLabCreateSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: add a new item of the computer-lab
      tags:
      - Computer Lab
    put:
      operationId: put-computer-lab
      parameters:
      - description: ID del item
        in: path
        name: id
        required: true
        type: string
      - description: Schema by Update New Computer Lab
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.ComputerLabUpdateSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: update a item of the computer-lab
      tags:
      - Computer Lab
  /api/v1/computer-labs:
    get:
      operationId: get-computer-labs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: get all items of the computer-lab
      tags:
      - Computer Lab
  /api/v1/computer-labs-limit/{length}:
    get:
      operationId: get-computer-labs_limit
      parameters:
      - description: Length of result
        in: path
        name: length
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: get N items of the computer-lab
      tags:
      - Computer Lab
  /api/v1/computer-labs-user/{user_name}:
    get:
      operationId: get-computer-labs-by-user
      parameters:
      - description: User Name
        in: path
        name: user_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: get N items of the computer-lab
      tags:
      - Computer Lab
  /api/v1/computer-set-state/{id}:
    put:
      operationId: put-computer-set-state
      parameters:
      - description: ID of Computer
        in: path
        name: id
        required: true
        type: string
      - description: Schema by Update New Computer
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.SetStateSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Set State of Compute
      tags:
      - Computers
  /api/v1/computers/{id-room}:
    get:
      operationId: get-computers-of-room
      parameters:
      - description: ID of Room
        in: path
        name: id-room
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: get a item of the computers of Room
      tags:
      - Computers
  /api/v1/link-account:
    post:
      operationId: post-link-account
      parameters:
      - description: Schema by LinkAccount User whit ComputerLab
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.LinkAccountRequisitionSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: LinkAccount User whit ComputerLab
      tags:
      - Accounts
    put:
      operationId: put-link-account
      parameters:
      - description: Schema by LinkAccount User whit ComputerLab
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.LinkAccountConfirmationSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: LinkAccount User whit ComputerLab
      tags:
      - Accounts
  /api/v1/link-account-janky:
    post:
      operationId: post-link-account-janky
      parameters:
      - description: Schema by LinkAccount User whit ComputerLab
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.LinkAccountRequisitionSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: LinkAccount User whit ComputerLab
      tags:
      - Accounts
  /api/v1/loan-computer:
    get:
      operationId: get-loan
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: add a new item of the computers
      tags:
      - Computers
    post:
      operationId: create-loan
      parameters:
      - description: Schema by Create New Loan
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.LoanCreateSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: add a new item of the computers
      tags:
      - Operations
  /api/v1/loan-computer-by-account-number:
    post:
      operationId: create-loan-by-account-number
      parameters:
      - description: Schema by Create New Computer
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.LoanCreateByAccountNumberSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: add a new item of the computers
      tags:
      - Operations
  /api/v1/loan-leave-computer:
    put:
      operationId: leave-loan-computer
      parameters:
      - description: Schema by Loan Leave Computer
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.LoanLeaveComputerSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: add a new item of the computers
      tags:
      - Operations
  /api/v1/room:
    delete:
      operationId: delete-room
      parameters:
      - description: ID of Room
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: delete a item of the rooms
      tags:
      - Rooms
    get:
      operationId: get-room
      parameters:
      - description: ID of Room
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: get a item of the rooms
      tags:
      - Rooms
    post:
      operationId: create-room
      parameters:
      - description: Schema by Create New Room
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.RoomCreateSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: add a new item of the rooms
      tags:
      - Rooms
    put:
      operationId: put-room
      parameters:
      - description: ID of Room
        in: path
        name: id
        required: true
        type: string
      - description: Schema by Update New Room
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.RoomUpdateSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: update a item of the rooms
      tags:
      - Rooms
  /api/v1/rooms/{id-computer-lab}:
    get:
      operationId: get-rooms-of-computer-lab
      parameters:
      - description: ID of ComputerLab
        in: path
        name: id-computer-lab
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: get a item of the rooms of ComputerLab
      tags:
      - Rooms
  /api/v1/signin:
    put:
      operationId: signin-user
      parameters:
      - description: Schema by SignIn User
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.UserSignInSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: SignIn User
      tags:
      - Accounts
  /api/v1/signup:
    post:
      operationId: signup-user
      parameters:
      - description: Schema by SignUp User
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.UserSignUpSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: SignUp User
      tags:
      - Accounts
  /api/v1/states:
    get:
      operationId: get-states
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: get all item of the States
      tags:
      - States
  /api/v1/student:
    delete:
      operationId: delete-student
      parameters:
      - description: ID of Student
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: delete a item of the students
      tags:
      - Students
    get:
      operationId: get-student
      parameters:
      - description: ID of Student
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: get a item of the students
      tags:
      - Students
    post:
      operationId: create-student
      parameters:
      - description: Schema by Create New Student
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.StudentCreateSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: add a new item of the students
      tags:
      - Students
    put:
      operationId: put-student
      parameters:
      - description: ID of Students
        in: path
        name: id
        required: true
        type: string
      - description: Schema by Update New Student
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schemas.StudentUpdateSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: update a item of the students
      tags:
      - Students
  /api/v1/students/{account-number}:
    get:
      operationId: get-student-by-account-number
      parameters:
      - description: Account Number of Student
        in: path
        name: account-number
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: get a item of the students
      tags:
      - Students
  /api/v1/university-programs:
    get:
      operationId: get-university-programs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: get all item of the UniversityPrograms
      tags:
      - UniversityPrograms
swagger: "2.0"
